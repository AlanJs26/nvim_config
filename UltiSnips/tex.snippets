
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def sympy_zone(): 
	current_line = snip.buffer[snip.line]
	mymatch = re.search('sympy(.+)sympy', current_line)
	return bool(mymatch)

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal




priority 100
snippet ... "ldots" iA
\ldots $0
endsnippet



snippet header "Header" b
---
tags: usp, $1
date: `date +%d-%m-%Y`
---

> `date +%d-%m-%Y\ \ %H:%M`

# ${2:`!v expand('%:t:r')`}

$0
endsnippet




snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet '(?<![a-z])(iff)' "iff" rA
\iff 
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
$$
${1:${VISUAL}}
$$ $0
endsnippet

snippet ali "Align" bA
\begin{align*}
${1:`!p
if(snip.v.text):
	splitted = snip.v.text.split("\n")
	splitted = [re.sub(r'=', '&=', f'\t{txt}', 1) for txt in splitted]
	snip.rv = '\\\\\n'.join(splitted[:-1])+splitted[-1]
`}
\end{align*}
$0
endsnippet

# \begin{align*}
# ${1:${VISUAL}}
# .\end{align*}

context "math()"

snippet vec "Vector" iA
\\vec{$1}$0
endsnippet

snippet hg "Huge" iA
{\\Huge $1} $0
endsnippet

snippet dlt "Delta" iA
\\Delta $0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet


context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# -- sympy -----------------

context "sympy_zone()"
snippet int "sympy integral" wA
\integrate($1)$0
endsnippet

context "sympy_zone()"
snippet '(diff|deriv)' "sympy dervative" rwA
\diff($1)$0
endsnippet

context "sympy_zone()"
snippet simplify "sympy simplify" wA
\simplify($1)$0
endsnippet

context "sympy_zone()"
snippet factor "sympy factor" wA
\factor($1)$0
endsnippet

context "sympy_zone()"
snippet expand "sympy expand" wA
\expand($1)$0
endsnippet

context "sympy_zone()"
snippet ratsimp "sympy ratsimp" wA
\ratsimp($1)$0
endsnippet

context "sympy_zone()"
snippet abs "sympy absolute" wA
\abs($1)$0
endsnippet

context "sympy_zone()"
snippet lim "sympy limit" wA
\limit($1,${2:x}, ${3:0})$0
endsnippet

context "sympy_zone()"
snippet solve "sympy solve" wA
\solve($1)$0
endsnippet


# -------------------

snippet eval "sympyblock " wA
sympy $1 sympy$0
endsnippet

context "math() and not sympy_zone()"
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
from sympy.parsing.latex import parse_latex
from sympy.parsing.sympy_parser import parse_expr, T
x, y, z, t = symbols('x y z t')
k, m, n, p = symbols('k m n p', integer=True)
f, g, h, u, v = symbols('f g h u v', cls=Function)
init_printing()

# code = match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') 
code = parse_latex(match.group(1))
# code = parse_latex(match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')')) 

# snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
snip.rv = latex(parse_expr(str(code), transformations='all', evaluate=True))
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
output = subprocess.check_output(['wolframscript', '-o', '-code', code])
# snip.rv = output.replace('\\\\\\\\', '\\\\')
snip.rv = output.decode()
`
endsnippet

# snippet == "equals" iA
# &= $1 \\\\
# endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet and "&&" iA
 && 
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" wA
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math() and not sympy_zone()"
snippet lim "limit" iA
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

# snippet limsup "limsup" w
# \limsup_{${1:n} \to ${2:\infty}} 
# endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet drv "derivative" iA
\frac{d $1}{d ${2:x}} $0
endsnippet


priority 100
context "math()"
snippet '(?!=[a-zA-Z])(f|h|g)x' "f(x)" riA
`!p snip.rv = match.group(1)`(x)$0
endsnippet

priority 200
context "math()"
snippet '(?!=[a-zA-Z])d(f|h|g)x' "f'(x)" riA
`!p snip.rv = match.group(1)`'(x)$0
endsnippet




context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet pw "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet color "color" w
\textcolor{$2}{$1}$0
endsnippet

# context "math()"
# snippet xmm "x" iA
# x_{m}
# endsnippet

snippet R0+ "R0+" iA
\\mathbb{R}_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet dd "div" iA
\div
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|tan|sec|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

# priority 100
# context "math()"
# snippet .. "unit" iA
# \text{ $1}$0
# endsnippet

priority 100
context "math()"
snippet '(?<! )tm' "asterisk" rA
*
endsnippet

priority 100
context "math()"
snippet '(?<= )tm' "asterisk" rA
* 
endsnippet

priority 100
context "math()"
snippet '(?<! )(pp|pm)' "plus" rA
+
endsnippet

priority 100
context "math()"
snippet '(?<= )(pp|pm)' "plus" rA
+ 
endsnippet

priority 100
context "math()"
snippet '(?<=[0-9])(mm|mp)|(?<=[0-9][a-zA-Z])(mm|mp)' "minus" rA
-
endsnippet

priority 100
context "math()"
snippet '(?<= )(mm|mp)' "minus" rA
- 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\mathbb{O}
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet QQ "Q" iA
\mathbb{Q}
endsnippet

snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet eqv "equivalent" iA
\equiv $0
endsnippet

snippet ]] "boxed" iA
\boxed{$1} $0
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
